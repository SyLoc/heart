{"version":3,"sources":["components/searchInput/images/icon-search.svg","components/searchInput/images/icon-close.svg","components/selectInput/images/arrow-icon.svg","components/singleSelectField/images/arrow-icon.svg","features/counter/counterAPI.js","features/counter/counterSlice.js","features/codeForMyLove/index.jsx","App.js","sagas.js","app/store.ts","serviceWorker.js","index.js","features/counter/Counter.module.css"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","index","className","App","useState","useMemo","reduce","result","item","price","log","mySaga","console","takeEvery","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","counter","counterReducer","middleware","getDefaultMiddleware","concat","run","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8OAAe,ICAA,I,eCAA,I,uBCAA,I,eCCR,SAASA,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAEE,KAAMJ,MAAW,QCAhD,IAUaK,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAON,GAAP,eAAAO,EAAA,sEACyBR,EAAWC,GADpC,cACQQ,EADR,yBAGSA,EAASJ,KAAO,GAHzB,2CAF4C,uDASjCK,EAAeC,YAAY,CACtCC,KAAM,UACNC,aArBmB,CACnBC,MAAO,EACPC,OAAQ,QAqBRC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMJ,OAAS,GAEjBK,UAAW,SAACD,GACVA,EAAMJ,OAAS,GAGjBM,kBAAmB,SAACF,EAAOG,GACzBH,EAAMJ,OAASO,EAAOC,UAK1BC,cAAe,SAACC,GACdA,EACGC,QAAQnB,EAAeoB,SAAS,SAACR,GAChCA,EAAMH,OAAS,aAEhBU,QAAQnB,EAAeqB,WAAW,SAACT,EAAOG,GACzCH,EAAMH,OAAS,OACfG,EAAMJ,OAASO,EAAOC,cAKvB,EAAoDZ,EAAakB,QAgBzDlB,GAhBR,EAAQO,UAAR,EAAmBE,UAAnB,EAA8BC,kBAgBtBV,EAAf,S,aCrEe,SAASmB,IACtB,OACE,mCACE,sBAAKC,UAAU,YAAf,UACE,sBAAMA,UAAU,gBAChB,sBAAMA,UAAU,gBAChB,sBAAMA,UAAU,qBCkNTC,MAjNf,WACE,MAA0BC,mBAAS,IAAnC,mBACA,GADA,UAC0BA,mBAAS,KAAnC,mBACA,GADA,UACwBA,mBAAS,KAAjC,mBAAO3B,EAAP,KAoIA,GApIA,KAQc4B,mBAAQ,WAGpB,OADc5B,EAAK6B,QAAO,SAACC,EAAQC,GAAT,OAAkBD,EAAoB,EAAXC,EAAKC,QAAS,KAElE,CAAChC,IAwH0B2B,mBAAS,IAAvC,mBAMA,OANA,UAOA,8BACE,cAAC,EAAD,O,2BCzIMM,G,WASAC,GATV,SAAUD,EAAIjB,GAAd,iEACEmB,QAAQF,IAAI,QAASjB,GADvB,uCASA,SAAUkB,IAAV,iEACE,OADF,SACQE,YAAU,IAAKH,GADvB,uCAiBeC,QCrCTG,EAAiBC,cAEVC,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,GAEXC,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,OAAOT,MAItEA,EAAeU,IAAIb,GCHCc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUhB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJiB,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB,mBEpInBC,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,qD","file":"static/js/main.158b5bac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-search.4b174aba.svg\";","export default __webpack_public_path__ + \"static/media/icon-close.4600cdba.svg\";","export default __webpack_public_path__ + \"static/media/arrow-icon.3829edc5.svg\";","export default __webpack_public_path__ + \"static/media/arrow-icon.3829edc5.svg\";","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data / 2;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import React from 'react';\r\nimport \"./style.css\"\r\n\r\nexport default function index() {\r\n  return (\r\n    <>\r\n      <div className='my__heart'>\r\n        <span className='my__heart-1'></span>\r\n        <span className='my__heart-2'></span>\r\n        <span className='my__heart-3'></span>\r\n      </div>\r\n  </>\r\n  );\r\n}\r\n","import React, { useState, useMemo } from 'react';\r\nimport './App.css';\r\n// import Home from './Containers/Home';\r\n// import Children from './features/Children';\r\nimport axios from 'axios';\r\nimport ReactPlayer from 'react-player';\r\nimport Render from './Containers/render';\r\nimport CodeForMyLove from './features/codeForMyLove'\r\n\r\n\r\nfunction App() {\r\n  const [value, setValue] = useState('');\r\n  const [price, setPrice] = useState('');\r\n  const [data, setData] = useState([]);\r\n\r\n  const handleSubmit = () =>{\r\n    setData([...data, {name: value, price: price}])\r\n    setValue('');\r\n    setPrice('');\r\n  }\r\n\r\n  const total = useMemo(() =>{\r\n    // console.log('re-render');\r\n    const value = data.reduce((result, item) => result + item.price*1, 0)\r\n    return value;\r\n  }, [data]);\r\n\r\n  const arr = [\r\n    {skill: {\r\n      id: '12wd3',\r\n      name:\"di lam gi do\"\r\n    }, level: {\r\n      name: 'level 1',\r\n      id: 1,\r\n    }},\r\n    {skill: {\r\n      id:'24fwq4',\r\n      name: 'di bo doi'\r\n    }, level: {\r\n      name: 'level 3',\r\n      id: 3,\r\n    }},\r\n    {skill: {\r\n     id: '1fwf233',\r\n     name: 'hello'\r\n    }, level: {\r\n      name: 'level 3',\r\n      id: 3,\r\n    }},\r\n    {skill: {\r\n      id: '1vsava23',\r\n      name: 'dei doi'\r\n    }, level: {\r\n      name: 'level 1',\r\n      id: 1,\r\n    }},\r\n    {skill: {\r\n      id: '1vs211sca23',\r\n      name: 'di choi'\r\n    }, level: {\r\n      name: 'level 4',\r\n      id: 4,\r\n    }},\r\n    {skill: {\r\n      id: 'shvvu',\r\n      name: 'di nhau'\r\n    }, level: {\r\n      name: 'level 4',\r\n      id: 4,\r\n    }}\r\n  ]\r\n\r\n  // const needFind = [{skill: '1fwf233', level: 3}, {skill: '1vs211sca23', level: 4}, {skill: 'shvvu', level: 4}]\r\n\r\n  // const arrEx = needFind.map((item) => item.skill);\r\n\r\n  // const findNameOfSkill = arr.filter((item) => arrEx.includes(item.skill.id))\r\n  \r\n  // console.log(findNameOfSkill)\r\n\r\n\r\n  const callApi = async() =>{\r\n    try {\r\n      const res = await fetch('http://localhost:3001/api/products?_page=1&_limit=3');\r\n      const data = await res.json();\r\n      console.log('data :', data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const getProductList = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:3001/api/products?_page=1&_limit=10');\r\n      console.log('list ',res?.data)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const getListOfClass = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:3001/api/class');\r\n      console.log('list ',res?.data)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const addClass = async (cls) => {\r\n    try {\r\n      const res = await axios.post('http://localhost:3001/api/class', cls);\r\n      console.log('list ',res?.data)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const updateClass = async (id, data) => {\r\n    try {\r\n      const res = await axios.put(`http://localhost:3001/api/class/${id}`, data);\r\n      console.log('list ',res?.data)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const updateClassbyPatch = async (id, data) => {\r\n    try {\r\n      const res = await axios.patch(`http://localhost:3001/api/class/${id}`, data);\r\n      console.log('list ',res?.data)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const deleteClass = async (id) => {\r\n    try {\r\n      const res = await axios.delete(`http://localhost:3001/api/class/${id}`);\r\n      console.log('list ',res?.data)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const [onVolum, setOnVolum] = useState(0)\r\n\r\n  const handleClickOnVolumn = () =>{\r\n    onVolum === 0 ? setOnVolum(1) : setOnVolum(0)\r\n  }\r\n\r\n  return (\r\n  <div>\r\n    <CodeForMyLove/>\r\n  </div>\r\n  )\r\n\r\n//   return (\r\n//     <div style={{textAlign: 'center', marginTop:'20px'}}>\r\n//       <input style={{border: '1px solid #f2f2f2'}} value={value} onChange={(e) => setValue(e.target.value)} />\r\n//       <input type='number' style={{border: '1px solid #f2f2f2'}} value={price} onChange={(e) => setPrice(e.target.value)} />\r\n//       <button onClick={handleSubmit} >submit</button>\r\n      \r\n//       <div>\r\n//         <button onClick={() => callApi()} >Click to callApi</button>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <button onClick={() => getProductList()} >Click me get list</button>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <button onClick={() => updateClass(35, {name:\"class updated\"})} >Click me to update class</button>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <button onClick={() => updateClassbyPatch(35, {name:\"class updated by patch\"})} >Click me to update class by patch</button>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <button onClick={() => deleteClass(35)} >Click me to delete class</button>\r\n//       </div>\r\n\r\n//       <div>\r\n//         <button onClick={() => getListOfClass()} >Click me to get list of class</button>\r\n//       </div>\r\n\r\n//       <div>video: </div>\r\n//       {/* <video autoPlay loop muted>\r\n//                     <source\r\n//                         src={`//player.vimeo.com/video/641869956?autoplay=1&loop=1&muted=0&controls=0`}\r\n//                     />\r\n//                 </video> */}\r\n\r\n// <ReactPlayer playing volume={onVolum} url={`//player.vimeo.com/video/641869956?autoplay=1&loop=1&muted=0&controls=0`} />\r\n// <button type='button' onClick={handleClickOnVolumn} >click me</button>\r\n\r\n\r\n//       <div>\r\n//         <button onClick={() => addClass({\r\n//           id: \"35\",\r\n//           name: \"Class name\",\r\n//           title:\"title 1\"\r\n//         })} >add class</button>\r\n//       </div>\r\n\r\n//       <h2>total: {total}</h2>\r\n\r\n//       { \r\n//         data.length !== 0 && (\r\n//           data?.map((item, index) =>(\r\n//             <h2 key={index}>{item.name}</h2>\r\n//           ))\r\n//         )\r\n//       }\r\n//     </div>\r\n//   );\r\n}\r\n\r\nexport default App;\r\n","import { call, put, takeEvery, takeLatest } from 'redux-saga/effects'\r\nimport { fetchUserApi } from './actions/user'\r\nimport {  PayloadAction } from '@reduxjs/toolkit'\r\n\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* fetchUser(action) {\r\n   try {\r\n      const user = yield call(fetchUserApi, action.payload.userId);\r\n      console.log(\"userId: \", action.payload.userId)\r\n      console.log(user)\r\n      yield put({type: \"USER_FETCH_SUCCEEDED\", user: user});\r\n   } catch (e) {\r\n      yield put({type: \"USER_FETCH_FAILED\", message: e.message});\r\n   }\r\n}\r\n\r\nfunction* log(action){\r\n  console.log(\"log: \", action)\r\n  // yield takeEvery(\"USER_FETCH_REQUESTED\", fetchUser);\r\n}\r\n\r\n/*\r\n  Starts fetchUser on each dispatched `USER_FETCH_REQUESTED` action.\r\n  Allows concurrent fetches of user.\r\n*/\r\nfunction* mySaga() {\r\n  yield takeEvery(\"*\", log);\r\n}\r\n\r\n/*\r\n  Alternatively you may use takeLatest.\r\n\r\n  Does not allow concurrent fetches of user. If \"USER_FETCH_REQUESTED\" gets\r\n  dispatched while a fetch is already pending, that pending fetch is cancelled\r\n  and only the latest one will be run.\r\n*/\r\n// function* mySaga() {\r\n//   yield takeLatest(\"USER_FETCH_REQUESTED\", fetchUser);\r\n// }\r\n\r\n\r\n\r\nexport default mySaga;","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport createSagaMiddleware from '@redux-saga/core';\r\nimport mySaga from '../sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware)\r\n});\r\n\r\n// then run the saga\r\nsagaMiddleware.run(mySaga)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './assets/styles/index.scss';\r\nimport App from './App';\r\nimport { store } from './app/store.ts';\r\n// import { store } from './main'\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1WBJ0\",\"value\":\"Counter_value__Ww01G\",\"button\":\"Counter_button__1BBV9\",\"textbox\":\"Counter_textbox__2h8da\",\"asyncButton\":\"Counter_asyncButton__1sils Counter_button__1BBV9\"};"],"sourceRoot":""}